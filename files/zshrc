export ZSH=$HOME/.oh-my-zsh
export DISABLE_AUTO_UPDATE=true
ZSH_THEME="robbyrussell"

plugins=(git brew gulp github fabric npm sbt scala)

export PATH="/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:$HOME/bin"
export PATH="$HOME/.rbenv/bin:$PATH"
eval "$(rbenv init -)"

export PATH=$HOME/.nvm/versions/node/v`cat $HOME/.nvm/alias/default`/bin:$PATH
nvm() {
    unset -f nvm
    source "$HOME/.nvm/nvm.sh"
    nvm "$@"
}

export PATH="$HOME/.pyenv/shims:$HOME/.pyenv/bin:$PATH"
export PATH="$HOME/.jdk/bin:$PATH"
source $ZSH/oh-my-zsh.sh

### git aliases (comment out aliases in ~/.oh-my-zsh/plugins/git/git.plugin.zsh in advance ###
alias rm-merged='git branch --merged | grep -v master | grep -v develop | grep -v "*" | while read BRANCH; do git branch -d ${BRANCH}; done; unset BRANCH;'
gc () { git checkout $1 }
gcbf () { git checkout -b feature/$1 }
gcm () { git commit -m "$*" }
gcl() {
	branch=`git branch | fzf | sed 's/^[ |\*]*//'`
	if [ -n "$branch" ]; then
		git checkout $branch
	fi
}
gcr() {
	branch=`git branch -r | fzf | sed 's/^[ |\*]*origin\///'`
	if [ -n "$branch" ]; then
		git checkout $branch
	fi
}
alias ga='git add -A && git diff --cached'
alias gcd='git checkout develop && git pull'
alias grh='git reset --hard HEAD'
alias gp='git pull'
alias gs='git status'
alias server-up='cd;./server.sh;node sample/index.js'
alias gu='git submodule update'
or () {
    remote=`git remote -v | tr '\n' ' ' | awk '{print $2}' | head -1`
    if [ "$remote" = "http*" ]; then
        open $remote
    else
        echo "$remote" | sed -e "s/git@\(.*\):\(.*\)\.git.*/https:\/\/\1\/\2/" | xargs open
    fi
}
### /git aliases ###

alias vu='cd ~/MyVagrant/centos && vagrant up'
alias vs='cd ~/MyVagrant/centos && vagrant ssh'
alias ctags="`brew --prefix`/bin/ctags"
alias dri='docker rmi $(docker images -f "dangling=true" -qa)'
alias drc='docker rm $(docker ps -aq)'
set-tag () { ctags -R --languages=$1 -f $HOME/.tags/$1.tags `pwd` }
mf () { mdfind -onlyin ./ "$*" }
cop () { cat $1 | pbcopy }
sssh() {
  local servers server
  servers=$(grep -iE "^host[[:space:]]+[^*]" ~/.ssh/config | awk "{print \$2}") &&
  server=$(echo "$servers" |
           fzf-tmux -d $(( 2 + $(wc -l <<< "$servers") )) +m) &&
  echo "ssh to $server ...\n" && ssh $(echo "$server")
}
fshow() {
  local out sha q
  while out=$(
      git log --graph --color=always \
          --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
      fzf --ansi --multi --no-sort --reverse --query="$q" --print-query); do
    q=$(head -1 <<< "$out")
    while read sha; do
      git show --color=always $sha | less -R
    done < <(sed '1d;s/^[^a-z0-9]*//;/^$/d' <<< "$out" | awk '{print $1}')
  done
}
cd-d() {
	dist=`ls ~/Documents | fzf-tmux`
	if [ -n "$dist" ]; then
		cd ~/Documents/$dist
	fi
}
vim-mf() {
	file=`mdfind -onlyin ./ "$*" | fzf`
	if [ -n "$file" ]; then
		vim $file
	fi
}
vim-fzf() {
	file=`fzf`
	if [ -n "$file" ]; then
		vim $file
	fi
}
vf() {
  file=`find . -name "*.$1" | fzf`
  if [ -n "$file" ]; then
    vim $file
  fi
}
vm() {
    file=`git grep "$1" | fzf | cut -f1 -d:`
    if [ -n "$file" ]; then
        vim $file
    fi
}
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

function urlencode {
  echo "$1" | nkf -WwMQ | tr '\n' % | sed -e "s/=%//g" | sed -e "s/%//g" | tr = %
}

pyv() {
    if [ "$1" = "-i" ]; then
        if [ -n "$2" ]; then
            dist=$2
        else
            dist=`pwd | gsed -e 's/.*\/\(.*\)/\1/'`
        fi
        mkdir -p ~/.pyvenv
        python -m venv ~/.pyvenv/$dist
        source ~/.pyvenv/$dist/bin/activate
        pip install -U pip
        pip install pip-tools
    elif [ "$1" = "-l" ]; then
        dist=`ls ~/.pyvenv | fzf-tmux`
        if [ -n "$dist" ]; then
            source ~/.pyvenv/$dist/bin/activate
        fi
    elif [ "$1" = "-a" ]; then
        dist=`pwd | gsed -e 's/.*\/\(.*\)/\1/'`
        if [ -n "$dist" ]; then
            source ~/.pyvenv/$dist/bin/activate
        fi
    elif [ "$1" = "-d" ]; then
        if [ -n "$2" ]; then
            dist=$2
        else
            dist=`pwd | gsed -e 's/.*\/\(.*\)/\1/'`
        fi
        rm -rf ~/.pyvenv/$dist
        echo "delete venv: $dist"
    elif [ -n "$1" ]; then
        source ~/.pyvenv/$1/bin/activate
    else
        echo "Error: you need to specify env name or set option" >&2
    fi
}
